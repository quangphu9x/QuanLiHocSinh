/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quanlihocsinh.UI;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class QuanLiLopHoc extends javax.swing.JPanel {

    /**
     * Creates new form QuanLiLopHoc
     */
    private classTableModel tableModel;
    
    public QuanLiLopHoc() {
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        changeNameButton = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        classIDField = new javax.swing.JTextField();
        classNameField = new javax.swing.JTextField();
        gradeComboBox = new javax.swing.JComboBox<>();
        saveClassButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Quản Lí Lớp Học");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã Lớp", "Tên Lớp", "Khối Lớp", "Sĩ số"
            }
        ));
        jScrollPane1.setViewportView(table);

        addButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        addButton.setText("Thêm");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        deleteButton.setText("Xóa");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        changeNameButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        changeNameButton.setText("Đổi tên");
        changeNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNameButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Thêm Lớp:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Mã lớp:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Tên lớp:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Khối:");

        classIDField.setEditable(false);
        classIDField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        classNameField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        saveClassButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        saveClassButton.setText("Thêm");
        saveClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveClassButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cancelButton.setText("Hủy");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(classIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(classNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gradeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(39, Short.MAX_VALUE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveClassButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(classIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(classNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(gradeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveClassButton)
                    .addComponent(cancelButton))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changeNameButton)
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(deleteButton)
                    .addComponent(changeNameButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void changeNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNameButtonActionPerformed
        if(table.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn lớp học để đổi tên!");
            return;
        }
        String oldClassName = table.getValueAt(table.getSelectedRow(), 2).toString();
        String classID = table.getValueAt(table.getSelectedRow(), 1).toString();
        
        String newClassName = JOptionPane.showInputDialog(this, "Nhập tên lớp:");
        if(newClassName == null || newClassName.equals("") || newClassName.equals(oldClassName))
            return;
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            if(checkClassExisted(newClassName, statement)) {
                connection.close();
                JOptionPane.showMessageDialog(this, "Tên lớp học đã tồn tại, vui lòng chọn tên khác!");
                return;
            }
            
            statement.executeUpdate("UPDATE LOPHOC SET TenLop='" + newClassName + "'"
                    + " WHERE MaLop='" + classID + "'"
            );
            connection.close();
            loadTable();
            JOptionPane.showMessageDialog(this, "Đổi tên lớp thành công!");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiLopHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra!");
        }
    }//GEN-LAST:event_changeNameButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        panel.setVisible(true);
        try {
            Connection connection = Main.sqlConnection.getConnection();
            classIDField.setText(generateClassID(connection.createStatement()));
            connection.close();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiLopHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        panel.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveClassButtonActionPerformed
        String classID = classIDField.getText();
        String className = classNameField.getText();
        String grade = gradeComboBox.getSelectedItem().toString();
        if(className.equals("")) {
            JOptionPane.showMessageDialog(this, "Bạn chưa điển tên lớp học!");
            return;
        }
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            if(checkClassExisted(className, statement)) {
                connection.close();
                JOptionPane.showMessageDialog(this, "Tên lớp đã tồn tại!");
                return;
            }
            
            statement.executeUpdate("INSERT INTO LOPHOC(MaLop, TenLop, KhoiLop) VALUES("
                    + "'" + classID + "', '" + className + "', " + grade + ")"
            );
            connection.close();
            JOptionPane.showMessageDialog(this.getParent(), "Thêm lớp " + className + " thành công!");
            loadTable();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiLopHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra!");
        }
    }//GEN-LAST:event_saveClassButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(table.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn lớp học để đổi tên!");
            return;
        }
        String className = table.getValueAt(table.getSelectedRow(), 2).toString();
        String classID = table.getValueAt(table.getSelectedRow(), 1).toString();
        int reply = JOptionPane.showConfirmDialog(this, 
                "Bạn có chắc chắn muốn xóa lớp học: " + className + " ?",
                "Xóa lớp",
                JOptionPane.YES_NO_OPTION
        );
        if(reply == JOptionPane.YES_OPTION) {
            try {
                Connection connection = Main.sqlConnection.getConnection();
                Statement statement = connection.createStatement();
                
                // xoa hoc sinh hoc lop hoc
                statement.executeUpdate("UPDATE HOCSINH SET MaLop=NULL WHERE MaLop='" + classID + "'");
                
                // xoa lich giang day cua lop hoc
                statement.executeUpdate("DELETE FROM GIANGDAY WHERE MaLop='" + classID + "'");
                
                // xoa lop hoc
                statement.executeUpdate("DELETE FROM LOPHOC WHERE MaLop='" + classID + "'");
                connection.close();
                
                loadTable();
                JOptionPane.showMessageDialog(this.getParent(), "Đã xóa lớp " + className + " !");
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(QuanLiLopHoc.class.getName()).log(Level.SEVERE, null, ex);
                Main.sqlConnection.closeAllConnection();
                JOptionPane.showMessageDialog(this, "Có lỗi xảy ra!");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void initData() {
        loadTable();
        try {
            // lay danh sach khoi
            Connection connection = Main.sqlConnection.getConnection();
            ResultSet rs = connection.createStatement().executeQuery(
                "SELECT KhoiLop FROM KHOI");
            while(rs.next())
                gradeComboBox.addItem(rs.getString(1));
            
            rs.close();
            connection.close();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiLopHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
    }
    
    private void loadTable() {
        panel.setVisible(false);
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            
            ResultSet rs = statement.executeQuery("SELECT * FROM LOPHOC ORDER BY KhoiLop,TenLop");
            tableModel = new classTableModel();
            int i = 0;
            while(rs.next()) {
                i++;
                Vector<String> rowData = new Vector<>();
                rowData.addElement(Integer.toString(i));
                rowData.addElement(rs.getString("MaLop"));
                rowData.addElement(rs.getString("TenLop"));
                rowData.addElement(rs.getString("KhoiLop"));
                rowData.addElement(rs.getString("SiSo"));
                tableModel.addRow(rowData);
            }
            rs.close();
            connection.close();
            table.setModel(tableModel);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiLopHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
    }
    
    private boolean checkClassExisted(String className, Statement statement) throws SQLException {
        ResultSet rs = statement.executeQuery(
                "SELECT * FROM LOPHOC WHERE TenLop='" + className + "'");
        rs.last();
        int rowCount = rs.getRow();
        rs.close();
        
        if(rowCount > 0) // ten lop da ton tai
            return true;
        return false;
    }
    
    private static class classTableModel extends DefaultTableModel {
        private String[] headers;
        
        public classTableModel() {
            headers = new String[] {"STT", "Mã lớp", "Tên lớp", "Khối lớp", "Sĩ số"};
            setRowCount(0);
        }
        
        @Override
        public int getColumnCount() {
            return headers.length;
        }
        
        @Override
        public String getColumnName(int col) {
            if(col >= 0 && col < headers.length)
                return headers[col];
            return "";
        }
        
        @Override
        public boolean isCellEditable(int row, int col) {
            return false;
        }
    }
    
    private String generateClassID(Statement statement)throws SQLException {
        ResultSet rs = statement.executeQuery("SELECT MaLop FROM LOPHOC ORDER BY(MaLop)");
        rs.last();
        
        String newID; // id lop moi
        if(rs.getRow() < 1) // chua co lop hoc nao
            newID = "0";
        else {
            // ma lop moi = ma lop cuoi cung + 1, VD: lop cuoi cung: LH009 -> lop moi: LH010
            int lastID = Integer.parseInt(
                    rs.getString(1).substring(2)
            );
            newID = Integer.toString(lastID + 1);
        }
        
        for(int i = newID.length(); i < 3; i++) // them cac so 0 de chieu dai = 3
            newID = "0" + newID;
        
        newID = "LH" + newID; // them LH vao ma lop
        rs.close();
        return newID;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton changeNameButton;
    private javax.swing.JTextField classIDField;
    private javax.swing.JTextField classNameField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> gradeComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JButton saveClassButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
