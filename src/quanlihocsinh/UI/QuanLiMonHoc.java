/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quanlihocsinh.UI;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import quanlihocsinh.Obj.quanlimonhoc.SubjectManagerTableModel;

/**
 *
 * @author DELL
 */
public class QuanLiMonHoc extends javax.swing.JPanel {

    /**
     * Creates new form QuanLiMonHoc
     */
    private SubjectManagerTableModel tableModel;
    
    public QuanLiMonHoc() {
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable() {
            @Override
            public void changeSelection(int rowIndex, int columnIndex, boolean toggle, boolean extend) {
                super.changeSelection(rowIndex, columnIndex, !extend, extend);
                tableModel.toggleSelection(rowIndex);
            }
        };
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        changeNameButton = new javax.swing.JButton();

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Quản lí môn học");

        table.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chọn", "STT", "Mã môn học", "Tên môn học"
            }
        ));
        jScrollPane2.setViewportView(table);

        addButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        addButton.setText("Thêm");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        deleteButton.setText("Xóa");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        changeNameButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        changeNameButton.setText("Đổi tên");
        changeNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(changeNameButton)
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(deleteButton)
                    .addComponent(changeNameButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initData() {
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            showOntable(statement);
            
            connection.close();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiMonHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String subjectName = JOptionPane.showInputDialog(this, "Nhập tên môn học muốn thêm:");
        if(subjectName == null)
            return;
        if(subjectName.equals("")) {
            JOptionPane.showMessageDialog(this, "Bạn chưa nhập tên môn học!");
            return;
        }
        
        if(subjectName.length() > 40) {
            JOptionPane.showMessageDialog(this, "Tên môn học không được vượt quá 40 kí tự!");
            return;
        }
        
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            
            if(subjectExisted(subjectName, statement)) {
                JOptionPane.showMessageDialog(this, "Tên môn học đã tồn tại!");
                connection.close();
                return;
            }
            String subjectID = generateSubjectID(statement);
            
            // them mon hoc va bang diem mon hoc
            statement.executeUpdate(
                    "INSERT INTO MONHOC VALUES('" + subjectID + "', '" + subjectName + "')");
            
            // lay danh sach ma hoc sinh
            ArrayList<String> students = new ArrayList<>();
            ResultSet rs = statement.executeQuery("SELECT MaHocSinh FROM HOCSINH");
            while(rs.next())
                students.add(rs.getString(1));
            rs.close();
            
            // them mon hoc cho tung hoc sinh
            for(String studentID: students) {
                for(int i = 1; i <= 2; i++) {
                    statement.executeUpdate(
                            "INSERT INTO BANGDIEMMON(MaMonHoc, MaHocSinh, HocKi) VALUES('"
                             + subjectID + "', '" + studentID + "', " + i + ")"
                    );
                }
            }
            
            showOntable(statement);
            connection.close();
            
            JOptionPane.showMessageDialog(this, "Thêm môn học \"" + subjectName + "\" thành công!");
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiMonHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void changeNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNameButtonActionPerformed
        int numOfSelectedRow = countSelectedRow(); // dem so dong duoc chon
        if(numOfSelectedRow == 0) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn môn học để đổi tên!");
            return;
        }
        
        if(numOfSelectedRow > 1) {
            JOptionPane.showMessageDialog(this, "Bạn chỉ có thể chọn mỗi lần 1 môn học để đổi tên!");
            return;
        }
        
        String newSubjectName = JOptionPane.showInputDialog(this, "Nhập tên mới cho môn học:");
        if(newSubjectName == null)
            return;
        if(newSubjectName.equals("")) {
            JOptionPane.showMessageDialog(this, "Hãy nhập tên mới cho môn học!");
            return;
        }
        if(newSubjectName.length() > 40) {
            JOptionPane.showMessageDialog(this, "Tên môn học không được vượt quá 40 kí tự!");
            return;
        }
        
        int selectedRow = table.getSelectedRow();
        String subjectID = table.getValueAt(selectedRow, 2).toString();
        String oldSujectName = table.getValueAt(selectedRow, 3).toString();
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            if(subjectExisted(newSubjectName, statement)) {
                JOptionPane.showMessageDialog(this, "Tên môn học đã tồn tại!");
                connection.close();
                return;
            }
            
            statement.executeUpdate(
                    "UPDATE MONHOC SET TenMonHoc='" + newSubjectName + "' " +
                    "WHERE MaMonHoc='" + subjectID + "'"
            );
            
            showOntable(statement);
            connection.close();
            JOptionPane.showMessageDialog(this,
                    "Đã đổi tên môn học \"" + oldSujectName + "\" thành \"" + newSubjectName + "\"");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiMonHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
        
    }//GEN-LAST:event_changeNameButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(countSelectedRow() < 1) {
            // chua co mon hoc nao duoc chon
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn môn học để xóa!");
            return;
        }
        
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            
            // xoa cac mon hoc
            String deletedSubject = "";
            for(int i = 0; i < table.getRowCount(); i++) {
                if(table.getValueAt(i, 0).equals(true)) {
                    String subjectID = table.getValueAt(i, 2).toString();
                    String subjectName = table.getValueAt(i, 3).toString();
                    
                    // xoa mon hoc va bang diem mon hoc
                    statement.executeUpdate(
                            "DELETE FROM MONHOC WHERE MaMonHoc='" + subjectID + "'");
                    
                    statement.executeUpdate(
                            "DELETE FROM BANGDIEMMON WHERE MaMonHoc='" + subjectID + "'");
                    if(!deletedSubject.equals(""))
                        deletedSubject += ", ";
                    deletedSubject += subjectName;
                }
            }
            
            showOntable(statement);
            connection.close();
            JOptionPane.showMessageDialog(this, "Đã xóa các môn học: " + deletedSubject);
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(QuanLiMonHoc.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
            
    }//GEN-LAST:event_deleteButtonActionPerformed

    private boolean subjectExisted(String subjectName, Statement statement) throws SQLException {
        boolean existed = false;
        ResultSet rs = statement.executeQuery(
                "SELECT * FROM MONHOC WHERE TenMonHoc='" + subjectName + "'");
        rs.last();
        if(rs.getRow() > 0) // mon hoc da ton tai
            existed = true;
        
        rs.close();
        return existed;
    }
    
    private String generateSubjectID(Statement statement)throws SQLException {
        // lay ma mon hoc lon nhat
        ResultSet rs = statement.executeQuery("SELECT MaMonHoc FROM MONHOC ORDER BY(MaMonHoc)");
        rs.last();
        String maxSubjectID;
        if(rs.getRow() < 1) // khong co mon hoc nao tren csdl
            maxSubjectID = "0";
        else
            maxSubjectID = rs.getString(1).substring(2);
        
        rs.close();
        
        // sinh ra ma mon hoc moi
        int newSubjectID = Integer.parseInt(maxSubjectID) + 1;
        String result = Integer.toString(newSubjectID);
        for(int i = result.length(); i < 3; i++)
            result = "0" + result;
        
        result = "MH" + result;
        return result;
    }
    
    private void showOntable(Statement statement) throws SQLException {
        tableModel = new SubjectManagerTableModel();
        
        // lay danh sach mon hoc
        ResultSet rs = statement.executeQuery("SELECT * FROM MONHOC");
        int i = 0;
        while(rs.next()) {
            i++;
            Vector<Object> rowData = new Vector<>();
            rowData.addElement(false);
            rowData.addElement(i);
            rowData.addElement(rs.getString(1));
            rowData.addElement(rs.getString(2));
            tableModel.addRow(rowData);
        }
        
        rs.close();
        table.setModel(tableModel);
    }
    
    private int countSelectedRow() {
        int result = 0;
        for(int i = 0; i < table.getRowCount(); i++)
            if(table.getValueAt(i, 0).equals(true))
                result++;
        return result;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton changeNameButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
