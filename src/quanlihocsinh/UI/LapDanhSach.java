/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quanlihocsinh.UI;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import quanlihocsinh.Obj.Student;
import quanlihocsinh.Obj.lapdanhsach.StudentTableModel;

/**
 *
 * @author DELL
 */
public class LapDanhSach extends javax.swing.JPanel {

    /**
     * Creates new form LapDanhSach
     */
    
    private ArrayList<Student> studentsInClass;
    private StudentTableModel studentsInClassTableModel;
    
    private ArrayList<Student> studentsToSelect;
    private StudentTableModel studentsToSelectTableModel;
    
    public LapDanhSach() {
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        numOfStudentField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentInClassTable = new javax.swing.JTable() {
            public void changeSelection(int rowIndex, int columnIndex, boolean toggle, boolean extend) {
                super.changeSelection(rowIndex, columnIndex, !extend, extend);
                studentsInClassTableModel.toogleSelection(rowIndex);
            }
        };
        jLabel4 = new javax.swing.JLabel();
        gradeSelectionField = new javax.swing.JComboBox<>();
        classSelectionField = new javax.swing.JComboBox<>();
        deleteSelectedStudentButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        newClassField = new javax.swing.JTextField();
        addClassButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        classToDeleteField = new javax.swing.JComboBox<>();
        deleteClassButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        changedClassNameField = new javax.swing.JTextField();
        changeClassNameButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        nameSearchField = new javax.swing.JTextField();
        sexSearchField = new javax.swing.JComboBox<>();
        yearOfBirthdaySearchField = new javax.swing.JTextField();
        addressSearchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        studentsToSelectTable = new javax.swing.JTable() {
            public void changeSelection(int rowIndex, int columnIndex, boolean toggle, boolean extend) {
                super.changeSelection(rowIndex, columnIndex, !extend, extend);
                studentsToSelectTableModel.toogleSelection(rowIndex);
            }
        };
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        addSelectedStudentButton = new javax.swing.JButton();

        setForeground(new java.awt.Color(0, 0, 255));
        setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Lập Danh Sách Lớp");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("Lớp:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Sĩ số:");

        numOfStudentField.setEditable(false);
        numOfStudentField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        numOfStudentField.setForeground(new java.awt.Color(0, 0, 255));

        studentInClassTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chọn", "STT", "Mã học sinh", "Họ Tên", "Giới Tính", "Năm Sinh", "Địa Chỉ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(studentInClassTable);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Khối:");

        gradeSelectionField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        gradeSelectionField.setForeground(new java.awt.Color(0, 0, 255));
        gradeSelectionField.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gradeSelectionFieldItemStateChanged(evt);
            }
        });
        gradeSelectionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeSelectionFieldActionPerformed(evt);
            }
        });

        classSelectionField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        classSelectionField.setForeground(new java.awt.Color(0, 0, 255));
        classSelectionField.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                classSelectionFieldItemStateChanged(evt);
            }
        });

        deleteSelectedStudentButton.setText("Xóa học sinh");
        deleteSelectedStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedStudentButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Thêm lớp mới:");

        newClassField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        newClassField.setToolTipText("Thêm 1 lớp mới vào khối đang chọn");

        addClassButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        addClassButton.setText("Thêm lớp");
        addClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClassButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Xóa lớp:");

        classToDeleteField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        classToDeleteField.setToolTipText("Xóa 1 lớp từ khối đang chọn");

        deleteClassButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        deleteClassButton.setText("Xóa lớp");
        deleteClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteClassButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Đổi tên lớp:");

        changedClassNameField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        changedClassNameField.setText("10A1");
        changedClassNameField.setToolTipText("Đổi tên lớp đang chọn");

        changeClassNameButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        changeClassNameButton.setText("Lưu tên lớp");
        changeClassNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeClassNameButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("Địa chỉ:");

        nameSearchField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        nameSearchField.setForeground(new java.awt.Color(0, 51, 255));

        sexSearchField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        sexSearchField.setForeground(new java.awt.Color(0, 51, 255));
        sexSearchField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Nam", "Nữ" }));

        yearOfBirthdaySearchField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        yearOfBirthdaySearchField.setForeground(new java.awt.Color(0, 0, 255));

        addressSearchField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        addressSearchField.setForeground(new java.awt.Color(0, 0, 255));

        searchButton.setText("Lọc");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setText("Chọn Học Sinh:");

        studentsToSelectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chọn", "Mã Học Sinh", "Họ Tên", "Giới Tính", "Năm sinh", "Địa chỉ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(studentsToSelectTable);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel10.setText("Họ tên:");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel11.setText("Giới tính:");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel12.setText("Năm sinh:");

        addSelectedStudentButton.setText("Thêm học sinh đã chọn");
        addSelectedStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSelectedStudentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(deleteSelectedStudentButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(classSelectionField, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numOfStudentField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gradeSelectionField, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(newClassField)
                                    .addComponent(classToDeleteField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(changedClassNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addClassButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteClassButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(changeClassNameButton))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(nameSearchField)
                                            .addComponent(sexSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(39, 39, 39)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(yearOfBirthdaySearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(addressSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(0, 94, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(418, 418, 418)
                                .addComponent(addSelectedStudentButton)
                                .addGap(9, 9, 9)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(gradeSelectionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(newClassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addClassButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(classSelectionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(classToDeleteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteClassButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(numOfStudentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(changedClassNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(changeClassNameButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteSelectedStudentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(nameSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(yearOfBirthdaySearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sexSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel8)
                    .addComponent(addressSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addSelectedStudentButton)
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initData() {
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            studentsInClass = new ArrayList<>();
            studentsToSelect = new ArrayList<>();
            
            // hien thi danh sach khoi
            ResultSet rs = statement.executeQuery("SELECT KhoiLop FROM KHOI ORDER BY(KhoiLop)");
            while(rs.next())
                gradeSelectionField.addItem(rs.getString(1));
            rs.close();
            
            // hien thi danh sach lop
            loadClassSelection("10", statement);
            
            // hien thi danh sach hoc sinh co the chon de them vao lop
            loadStudentsToSelect();
            
            connection.close();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LapDanhSach.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
    }
    
    private void loadClassSelection(String grade, Statement statement) throws SQLException {
        classSelectionField.removeAllItems();
        classToDeleteField.removeAllItems();
        ResultSet rs = statement.executeQuery(
                "SELECT TenLop, SiSo FROM LOPHOC WHERE KhoiLop=" + grade + " ORDER BY(TenLop)");
        while(rs.next()) {
            classSelectionField.addItem(rs.getString(1));
            classToDeleteField.addItem(rs.getString(1));
        }
        rs.first();
        numOfStudentField.setText(rs.getString(2)); //hien thi si so cua lop dau tien
        rs.close();
    }
    
    private void loadStudentsInClass(Statement statement) throws SQLException {
        ResultSet rs;
        // lay ma lop
        String className = classSelectionField.getSelectedItem().toString();
        rs = statement.executeQuery(
                "SELECT MaLop FROM LOPHOC WHERE TenLop='" + className + "'");
        rs.first();
        String classID = rs.getString(1);
        
        // lay danh sach hoc sinh trong lop
        studentsInClass.clear(); // xoa danh sach hien tai
        rs = statement.executeQuery(
                "SELECT MaHocSinh, HoVaTen, GioiTinh, NgaySinh, DiaChi FROM HOCSINH"
                + " WHERE MaLop='" + classID + "'"
        );
        while(rs.next()) {
            Student student = new Student(
                    rs.getString(1), // id
                    rs.getString(2), // name
                    rs.getInt(3), // sex
                    rs.getString(4), // birthday
                    rs.getString(5), // address
                    "", // email
                    0, // grade
                    "", // className
                    (float)0.0, // trung binh hk1
                    (float)0.0 // trung binh hk2
            );
            studentsInClass.add(student);
        }
        rs.close();
        
        // hien thi danh sach hoc sinh
        studentsInClassTableModel = new StudentTableModel(studentsInClass);
        studentInClassTable.setModel(studentsInClassTableModel);
    }
    
    private void loadStudentsToSelect() {
        searchButtonActionPerformed(null); // nhan nut search
    }
    
    private void gradeSelectionFieldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gradeSelectionFieldItemStateChanged
        if(evt.getStateChange() == 2) // item deselected
            return;
        try {
            Connection connection = Main.sqlConnection.getConnection();
            loadClassSelection(
                    gradeSelectionField.getSelectedItem().toString(),
                    connection.createStatement()
            );
            connection.close();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LapDanhSach.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
    }//GEN-LAST:event_gradeSelectionFieldItemStateChanged

    private void classSelectionFieldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_classSelectionFieldItemStateChanged
        if(evt.getStateChange() == 2) // item deselected
            return;
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            // lay si so lop
            String className = classSelectionField.getSelectedItem().toString();
            ResultSet rs = statement.executeQuery(
                    "SELECT SiSo FROM LOPHOC WHERE TenLop='" + className + "'");
            rs.first();
            numOfStudentField.setText(rs.getString(1));
            rs.close();
            
            // hien thi lop vao o doi ten
            changedClassNameField.setText(
                    classSelectionField.getSelectedItem().toString());
            
            // hien thi danh sach hoc sinh trong lop
            loadStudentsInClass(statement);
            
            connection.close();
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LapDanhSach.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
        System.out.println("class selection changed!");
    }//GEN-LAST:event_classSelectionFieldItemStateChanged
    
    private void addClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClassButtonActionPerformed
        String newClassName = newClassField.getText();
        if(newClassName.equals(""))
            return;
        
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            
            // kiem tra xem lop hoc da ton tai chua
            ResultSet rs = statement.executeQuery(
                    "SELECT MaLop FROM LOPHOC WHERE TenLop='" + newClassName + "'");
            rs.last();
            if(rs.getRow() > 0)
                JOptionPane.showMessageDialog(this, "Lớp học đã tồn tại!");
            else {
                String newClassID = generateClassID(statement);
                String grade = gradeSelectionField.getSelectedItem().toString();
                statement.executeUpdate(
                        "INSERT INTO LOPHOC(MaLop, TenLop, KhoiLop) VALUES('"
                        + newClassID + "', '" + newClassName + "',"
                        + grade + " )");
                loadClassSelection(grade, statement);
                JOptionPane.showMessageDialog(this, "Thêm thành công lớp " + newClassName);
            }
            rs.close();
            connection.close();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LapDanhSach.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra! hãy thử lại.");
            Main.sqlConnection.closeAllConnection();
        }
    }//GEN-LAST:event_addClassButtonActionPerformed

    private void deleteClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteClassButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteClassButtonActionPerformed

    private void changeClassNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeClassNameButtonActionPerformed
        String newClassName = changedClassNameField.getText();
        if(newClassName.equals(""))
            return;
        
        Connection connection = null;
        try {
            connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            
            // kiem tra xem ten lop da ton tai chua
            ResultSet rs = statement.executeQuery(
                    "SELECT MaLop FROM LOPHOC WHERE TenLop='" + newClassName + "'");
            rs.last();
            if(rs.getRow() > 0)
                JOptionPane.showMessageDialog(this, "Tên lớp này đã tồn tại! Hãy chọn tên khác");
            else {
                statement.executeUpdate(
                        "UPDATE LOPHOC SET TenLop='" + newClassName + "' WHERE TenLop='"
                        + classSelectionField.getSelectedItem().toString() + "'"
                );
                loadClassSelection(
                        gradeSelectionField.getSelectedItem().toString(),
                        statement
                );
                JOptionPane.showMessageDialog(this, "Đổi tên lớp thành công!");
            }
            rs.close();
            connection.close();
            System.out.println("SQL closed!");
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LapDanhSach.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
    }//GEN-LAST:event_changeClassNameButtonActionPerformed

    private void deleteSelectedStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedStudentButtonActionPerformed
        String className = classSelectionField.getSelectedItem().toString();
        int reply = JOptionPane.showConfirmDialog(
                this,
                "Bạn có chắc chắn muốn xóa các học sinh đã chọn ra khỏi lớp " + className + " không?",
                "Xóa học sinh",
                JOptionPane.YES_NO_OPTION
        );
        if(reply == JOptionPane.YES_OPTION) {
            try {
                Connection connection = Main.sqlConnection.getConnection();
                Statement statement = connection.createStatement();
                String deletedStudents = ""; // danh sach hoc sinh da xoa
                
                int numOfStudentDeleted = 0; // so hoc sinh da xoa
                for(int i = 0; i < studentInClassTable.getRowCount(); i++) {
                    // xoa cac hoc sinh duoc chon
                    if(studentInClassTable.getValueAt(i, 0).equals(true)) {
                        String studentID = studentsInClass.get(i).getID();
                        statement.executeUpdate(
                                "UPDATE HOCSINH SET MaLop=NULL WHERE MaHocSinh='" + studentID + "'");
                        if(!deletedStudents.equals(""))
                            deletedStudents += ",";
                        deletedStudents += studentID;
                        numOfStudentDeleted++;
                    }
                }
                
                if(numOfStudentDeleted == 0)
                    JOptionPane.showMessageDialog(this, "Không có học sinh nào được chọn!");
                else {
                    /*
                    cap nhat danh sach hoc sinh sau khi xoa,
                    cap nhat si so lop
                    danh sach hoc sinh co the them vao lop
                    hop thoai thong bao danh sach hoc sinh da xoa
                    */
                    loadStudentsInClass(statement);
                    
                    int oldNumOfSstudent = Integer.parseInt(numOfStudentField.getText());
                    int newNumOfStudent = oldNumOfSstudent - numOfStudentDeleted;
                    statement.executeUpdate(
                            "UPDATE LOPHOC SET SiSo=" + newNumOfStudent +
                            " WHERE TenLop='" + className + "'"
                    );
                    numOfStudentField.setText(Integer.toString(newNumOfStudent));
                    
                    loadStudentsToSelect();
                    JOptionPane.showMessageDialog(this, "Đã xóa các học sinh: " + deletedStudents);
                }
                
                connection.close();
                
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(LapDanhSach.class.getName()).log(Level.SEVERE, null, ex);
                Main.sqlConnection.closeAllConnection();
            }
        }
    }//GEN-LAST:event_deleteSelectedStudentButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String sql = createSQLSearch(); // tao cau lenh SQL tim kiem hoc sinh
        System.out.println(sql);
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(sql);
            
            // reset danh sach hoc sinh co the chon
            studentsToSelect.clear();
            // tao danh sach hoc sinh co the chon
            while(rs.next()) {
                Student student = new Student(
                        rs.getString(1), // id
                        rs.getString(2), // name
                        rs.getInt(3), // sex
                        rs.getString(4), // birthday
                        rs.getString(5), // address
                        "", // email
                        0, // grade
                        "", // class Name
                        (float)0.0, // dtb hk1
                        (float)0.0 // dtb hk2
                );
                studentsToSelect.add(student);
            }
            rs.close();
            connection.close();
            
            // hien thi danh sach hoc sinh co the chon
            studentsToSelectTableModel = new StudentTableModel(studentsToSelect);
            studentsToSelectTable.setModel(studentsToSelectTableModel);
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LapDanhSach.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addSelectedStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSelectedStudentButtonActionPerformed
        int currentNumOfStudent = Integer.parseInt(numOfStudentField.getText()); // si so hien tai
        int numStudentsToAdd = 0;
        for(int i = 0; i < studentsToSelectTable.getRowCount(); i++)
            if(studentsToSelectTable.getValueAt(i, 0).equals(true))
                numStudentsToAdd++;
        
        if(numStudentsToAdd < 1) // khong co hoc sinh nao duoc them vao
            return;
        try {
            Connection connection = Main.sqlConnection.getConnection();
            Statement statement = connection.createStatement();
            String className = classSelectionField.getSelectedItem().toString();
            
            // lay si so hoc sinh toi da cua 1 lop
            ResultSet rs = statement.executeQuery("SELECT SiSoToiDa FROM THAMSO");
            rs.first();
            int maxStudentInClass = rs.getInt(1);
            if(numStudentsToAdd + currentNumOfStudent > maxStudentInClass) {
                JOptionPane.showMessageDialog(this, 
                        "Số học sinh thêm vào sẽ vượt quá sĩ số tối đa (" + maxStudentInClass + " học sinh)!");
                rs.close();
                connection.close();
                return;
            }
            
            // lay ma lop
            rs = statement.executeQuery(
                    "SELECT MaLop FROM LOPHOC WHERE TenLop='" + className + "'");
            rs.first();
            String classID = rs.getString(1);
            rs.close();
            
            // them cac hoc sinh duoc chon vao lop hoc
            String addedStudents = "";
            for(int i = 0; i < studentsToSelectTable.getRowCount(); i++) {
                if(studentsToSelectTable.getValueAt(i, 0).equals(true)) { // hcc sinh duoc chon
                    String studentID = studentsToSelect.get(i).getID();
                    statement.executeUpdate(
                            "UPDATE HOCSINH SET MaLop='" + classID
                            + "' WHERE MaHocSinh='" + studentID + "'"
                    );
                    if(!addedStudents.equals(""))
                        addedStudents += ",";
                    addedStudents += studentID;
                }
            }
            
            // cap nhat si so lop
            statement.executeUpdate(
                    "UPDATE LOPHOC SET SiSo=" + (currentNumOfStudent + numStudentsToAdd)
                    + " WHERE MaLop='" + classID + "'"
            );
            
            /*
            cap nhat danh sach lop, danh sach hoc sinh co the them,
            hien thi danh sach hoc sinh vua them vao lop
            cap nhat si so lop
            */
            loadStudentsInClass(statement);
            loadStudentsToSelect();
            numOfStudentField.setText(Integer.toString(numStudentsToAdd + currentNumOfStudent));
            JOptionPane.showMessageDialog(this, "Đã thêm các học sinh: " + addedStudents);
            
            connection.close();
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(LapDanhSach.class.getName()).log(Level.SEVERE, null, ex);
            Main.sqlConnection.closeAllConnection();
        }
    }//GEN-LAST:event_addSelectedStudentButtonActionPerformed

    private void gradeSelectionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeSelectionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeSelectionFieldActionPerformed
    
    private String generateClassID(Statement statement)throws SQLException {
        ResultSet rs = statement.executeQuery("SELECT MaLop FROM LOPHOC ORDER BY(MaLop)");
        rs.last();
        
        String newID; // id lop moi
        if(rs.getRow() < 1) // chua co lop hoc nao
            newID = "0";
        else {
            // ma lop moi = ma lop cuoi cung + 1, VD: lop cuoi cung: LH009 -> lop moi: LH010
            int lastID = Integer.parseInt(
                    rs.getString(1).substring(2)
            );
            newID = Integer.toString(lastID + 1);
        }
        
        for(int i = newID.length(); i < 3; i++) // them cac so 0 de chieu dai = 3
            newID = "0" + newID;
        
        newID = "LH" + newID; // them LH vao ma lop
        rs.close();
        return newID;
    }
    
    // tao cau lenh sql tim kiem hoc sinh
    private String createSQLSearch() {
        String name = nameSearchField.getText();
        int sex = sexSearchField.getSelectedIndex(); // 0: tat ca, 1: nam, 2 nu
        String yearOfBirthday = yearOfBirthdaySearchField.getText();
        String address = addressSearchField.getText();
        
        String whereClause = " WHERE MaLop IS NULL"; // chi hien thi nhung hoc sinh chua duoc xep lop
        if(!name.equals(""))
            whereClause = whereClause + " AND HoVaTen LIKE '%" + name + "%'";
        
        if(sex != 0)
            whereClause = whereClause + " AND GioiTinh=" + (sex - 1); // tren CSDL 0 la nam, 1 la nu
        
        if(!yearOfBirthday.equals(""))
            whereClause = whereClause + " AND YEAR(NgaySinh)=" + Integer.parseInt(yearOfBirthday);
        
        if(!address.equals(""))
            whereClause = whereClause + " AND DiaChi LIKE '%" + address + "%'";
        
        // tao cau lenh sql
        String sql = "SELECT MaHocSinh, HoVaTen, GioiTinh, NgaySinh, DiaChi FROM HOCSINH"
                + whereClause + " ORDER BY(HoVaTen)";
        
        return sql;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClassButton;
    private javax.swing.JButton addSelectedStudentButton;
    private javax.swing.JTextField addressSearchField;
    private javax.swing.JButton changeClassNameButton;
    private javax.swing.JTextField changedClassNameField;
    private javax.swing.JComboBox<String> classSelectionField;
    private javax.swing.JComboBox<String> classToDeleteField;
    private javax.swing.JButton deleteClassButton;
    private javax.swing.JButton deleteSelectedStudentButton;
    private javax.swing.JComboBox<String> gradeSelectionField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nameSearchField;
    private javax.swing.JTextField newClassField;
    private javax.swing.JTextField numOfStudentField;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> sexSearchField;
    private javax.swing.JTable studentInClassTable;
    private javax.swing.JTable studentsToSelectTable;
    private javax.swing.JTextField yearOfBirthdaySearchField;
    // End of variables declaration//GEN-END:variables
}
